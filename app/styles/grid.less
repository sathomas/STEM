/**
 * ## Grid
 *
 * Within sections (and articles) we use a standard
 * 12-column grid for overall layout, in a responsive,
 * mobile-first architecture.
 *
 * We're using flexbox for the grid since the page
 * layout is challenging for other grid approaches
 * (inline-block or floats). That does leave IE9
 * unsupported. If IE9 is desired in the future, it
 * should be possible to provide "close enough"
 * fallbacks using floats.
 */

/**
 * ### `container`
 * The `container` class or mixin encapsulates all
 * grid-based content. Containers that are themselves
 * nested within other elements are centered within
 * those elements.
 *
 *     @example:
 *     <div class="container">
 *         Contents here, starting with rows
 *     </div>
 */

.container {
    box-sizing: border-box;
    margin-left: auto;
    margin-right: auto;
}

.no-flexbox {
    .container:after {
        clear: both;
        content: "";
        display: table;
    }
}

/**
 * ### `row`
 * The `row` class encapsulates a single row
 * in the grid. Content within the row will
 * be vertically aligned, subject to wrapping.
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             Columns go here
 *         </div>
 *     </div>
 */

.row {
    align-items: stretch;   // full-height columns
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    &:after { // Prevent from collapsing to 0 height when non-flexbox styles are used.
        clear: both;
        content: "";
        display: table;
    }
}

/**
 * ### `column`
 * Column widths may be specified in two different
 * ways. One way simply counts the number of columns
 * the element should use. There are 12 columns in
 * a full row, so the `six-columns` class represents
 * half of the width of the container.
 *
 * Alternatively, columns may be specified as the
 * fraction of the row. With this method, the
 * above element would be given the `one-half-column`
 * class. One of these two methods should be
 * used consistenly within a block to avoid confusion.
 * The current styles use the fractional column
 * approach.
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             <div class="three-columns">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     3/12 (1/4) of row
 *                 </div>
 *             </div>
 *             <div class="nine-columns">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     9/12 (3/4) of row
 *                 </div>
 *             </div>
 *         </div>
 *         <div class="row" style="margin-top:0.2em">
 *             <div class="two-thirds-column">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     2/3 of row
 *                 </div>
 *             </div>
 *             <div class="one-third-column">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     1/3 of row
 *                 </div>
 *             </div>
 *         </div>
 *     </div>
 */


.column {
    box-sizing: border-box;
    flex-basis: 100%;
    flex-grow: 1;
    flex-shrink: 1;
    float: left;
    max-width: 100%;
}

.zero-columns {
    .column;
    flex-basis: 0;
    width: 0;
}

.one-column {
    .column;
    @media @tablet  { flex-basis: 50%;    max-width: 50%;       width: 50%;     }
    @media @desktop { flex-basis: 8.33%;  max-width: 8.33%;     width: 8.33%;   }
}

.two-columns {
    .column;
    @media @tablet  { flex-basis: 50%;    max-width: 50%;       width: 50%;     }
    @media @desktop { flex-basis: 16.66%; max-width: 16.66%;    width: 16.66%;  }
}

.three-columns {
    .column;
    @media @tablet  { flex-basis: 50%;    max-width: 50%;       width: 50%;     }
    @media @desktop { flex-basis: 25%;    max-width: 25%;       width: 25%;     }

}

.four-columns {
    .column;
    @media @tablet  { flex-basis: 50%;    max-width: 50%;       width: 50%;     }
    @media @desktop { flex-basis: 33.33%; max-width: 33.33%;    width: 33.33%;  }

}

.five-columns {
    .column;
    @media @tablet  { flex-basis: 50%;    max-width: 50%;       width: 50%;     }
    @media @desktop { flex-basis: 41.66%; max-width: 41.666%;   width: 41.666%; }

}

.six-columns {
    .column;
    @media @tablet  { flex-basis: 50%;    max-width: 50%;       width: 50%;     }
    @media @desktop { flex-basis: 50%;    max-width: 50%;       width: 50%;     }

}

.seven-columns {
    .column;
    @media @desktop { flex-basis: 58.33%; max-width: 58.33%;    width: 58.33%;  }

}

.eight-columns {
    .column;
    @media @desktop { flex-basis: 66.66%; max-width: 66.66%;    width: 66.66%   }

}

.nine-columns {
    .column;
    @media @desktop { flex-basis: 75%;    max-width: 75%;       width: 75%;     }

}

.ten-columns {
    .column;
    @media @desktop { flex-basis: 83.33%; max-width: 83.333%;   width: 83.333%; }

}

.eleven-columns {
    .column;
    @media @desktop { flex-basis: 91.66%; max-width: 91.66%;    width: 91.66%;  }

}

.twelve-columns {
    .column;
}

.one-sixth-column     { .two-columns; }
.one-fourth-column    { .three-columns; }
.one-third-column     { .four-columns; }
.one-half-column      { .six-columns; }
.two-thirds-column    { .eight-columns; }
.three-fourths-column { .nine-columns; }
.five-sixths-column   { .ten-columns; }
.one-full-column      { .twelve-columns; }
